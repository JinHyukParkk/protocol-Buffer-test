// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vector_tile2.1.proto

public final class VectorTile21 {
  private VectorTile21() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface TileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:vector_tile.Tile)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                Tile, Tile.Builder> {

    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    java.util.List<vector_tile.VectorTile21.Tile.Layer>
        getLayersList();
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    vector_tile.VectorTile21.Tile.Layer getLayers(int index);
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    int getLayersCount();
  }
  /**
   * Protobuf type {@code vector_tile.Tile}
   */
  public  static final class Tile extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        Tile, Tile.Builder> implements
      // @@protoc_insertion_point(message_implements:vector_tile.Tile)
      TileOrBuilder {
    private Tile() {
      layers_ = emptyProtobufList();
    }
    /**
     * <pre>
     * GeomType is described in section 4.3.4 of the specification
     * </pre>
     *
     * Protobuf enum {@code vector_tile.Tile.GeomType}
     */
    public enum GeomType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNKNOWN = 0;</code>
       */
      UNKNOWN(0),
      /**
       * <code>POINT = 1;</code>
       */
      POINT(1),
      /**
       * <code>LINESTRING = 2;</code>
       */
      LINESTRING(2),
      /**
       * <code>POLYGON = 3;</code>
       */
      POLYGON(3),
      ;

      /**
       * <code>UNKNOWN = 0;</code>
       */
      public static final int UNKNOWN_VALUE = 0;
      /**
       * <code>POINT = 1;</code>
       */
      public static final int POINT_VALUE = 1;
      /**
       * <code>LINESTRING = 2;</code>
       */
      public static final int LINESTRING_VALUE = 2;
      /**
       * <code>POLYGON = 3;</code>
       */
      public static final int POLYGON_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static GeomType valueOf(int value) {
        return forNumber(value);
      }

      public static GeomType forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN;
          case 1: return POINT;
          case 2: return LINESTRING;
          case 3: return POLYGON;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<GeomType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          GeomType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<GeomType>() {
              public GeomType findValueByNumber(int number) {
                return GeomType.forNumber(number);
              }
            };

      private final int value;

      private GeomType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:vector_tile.Tile.GeomType)
    }

    public interface ValueOrBuilder extends
        // @@protoc_insertion_point(interface_extends:vector_tile.Tile.Value)
         com.google.protobuf.GeneratedMessageLite.
              ExtendableMessageOrBuilder<
                  Value, Value.Builder> {

      /**
       * <pre>
       * Exactly one of these values must be present in a valid message
       * </pre>
       *
       * <code>optional string string_value = 1;</code>
       */
      boolean hasStringValue();
      /**
       * <pre>
       * Exactly one of these values must be present in a valid message
       * </pre>
       *
       * <code>optional string string_value = 1;</code>
       */
      java.lang.String getStringValue();
      /**
       * <pre>
       * Exactly one of these values must be present in a valid message
       * </pre>
       *
       * <code>optional string string_value = 1;</code>
       */
      com.google.protobuf.ByteString
          getStringValueBytes();

      /**
       * <code>optional float float_value = 2;</code>
       */
      boolean hasFloatValue();
      /**
       * <code>optional float float_value = 2;</code>
       */
      float getFloatValue();

      /**
       * <code>optional double double_value = 3;</code>
       */
      boolean hasDoubleValue();
      /**
       * <code>optional double double_value = 3;</code>
       */
      double getDoubleValue();

      /**
       * <code>optional int64 int_value = 4;</code>
       */
      boolean hasIntValue();
      /**
       * <code>optional int64 int_value = 4;</code>
       */
      long getIntValue();

      /**
       * <code>optional uint64 uint_value = 5;</code>
       */
      boolean hasUintValue();
      /**
       * <code>optional uint64 uint_value = 5;</code>
       */
      long getUintValue();

      /**
       * <code>optional sint64 sint_value = 6;</code>
       */
      boolean hasSintValue();
      /**
       * <code>optional sint64 sint_value = 6;</code>
       */
      long getSintValue();

      /**
       * <code>optional bool bool_value = 7;</code>
       */
      boolean hasBoolValue();
      /**
       * <code>optional bool bool_value = 7;</code>
       */
      boolean getBoolValue();
    }
    /**
     * <pre>
     * Variant type encoding
     * The use of values is described in section 4.1 of the specification
     * </pre>
     *
     * Protobuf type {@code vector_tile.Tile.Value}
     */
    public  static final class Value extends
        com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
          Value, Value.Builder> implements
        // @@protoc_insertion_point(message_implements:vector_tile.Tile.Value)
        ValueOrBuilder {
      private Value() {
        stringValue_ = "";
      }
      private int bitField0_;
      public static final int STRING_VALUE_FIELD_NUMBER = 1;
      private java.lang.String stringValue_;
      /**
       * <pre>
       * Exactly one of these values must be present in a valid message
       * </pre>
       *
       * <code>optional string string_value = 1;</code>
       */
      public boolean hasStringValue() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Exactly one of these values must be present in a valid message
       * </pre>
       *
       * <code>optional string string_value = 1;</code>
       */
      public java.lang.String getStringValue() {
        return stringValue_;
      }
      /**
       * <pre>
       * Exactly one of these values must be present in a valid message
       * </pre>
       *
       * <code>optional string string_value = 1;</code>
       */
      public com.google.protobuf.ByteString
          getStringValueBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(stringValue_);
      }
      /**
       * <pre>
       * Exactly one of these values must be present in a valid message
       * </pre>
       *
       * <code>optional string string_value = 1;</code>
       */
      private void setStringValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        stringValue_ = value;
      }
      /**
       * <pre>
       * Exactly one of these values must be present in a valid message
       * </pre>
       *
       * <code>optional string string_value = 1;</code>
       */
      private void clearStringValue() {
        bitField0_ = (bitField0_ & ~0x00000001);
        stringValue_ = getDefaultInstance().getStringValue();
      }
      /**
       * <pre>
       * Exactly one of these values must be present in a valid message
       * </pre>
       *
       * <code>optional string string_value = 1;</code>
       */
      private void setStringValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        stringValue_ = value.toStringUtf8();
      }

      public static final int FLOAT_VALUE_FIELD_NUMBER = 2;
      private float floatValue_;
      /**
       * <code>optional float float_value = 2;</code>
       */
      public boolean hasFloatValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float float_value = 2;</code>
       */
      public float getFloatValue() {
        return floatValue_;
      }
      /**
       * <code>optional float float_value = 2;</code>
       */
      private void setFloatValue(float value) {
        bitField0_ |= 0x00000002;
        floatValue_ = value;
      }
      /**
       * <code>optional float float_value = 2;</code>
       */
      private void clearFloatValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        floatValue_ = 0F;
      }

      public static final int DOUBLE_VALUE_FIELD_NUMBER = 3;
      private double doubleValue_;
      /**
       * <code>optional double double_value = 3;</code>
       */
      public boolean hasDoubleValue() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double double_value = 3;</code>
       */
      public double getDoubleValue() {
        return doubleValue_;
      }
      /**
       * <code>optional double double_value = 3;</code>
       */
      private void setDoubleValue(double value) {
        bitField0_ |= 0x00000004;
        doubleValue_ = value;
      }
      /**
       * <code>optional double double_value = 3;</code>
       */
      private void clearDoubleValue() {
        bitField0_ = (bitField0_ & ~0x00000004);
        doubleValue_ = 0D;
      }

      public static final int INT_VALUE_FIELD_NUMBER = 4;
      private long intValue_;
      /**
       * <code>optional int64 int_value = 4;</code>
       */
      public boolean hasIntValue() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int64 int_value = 4;</code>
       */
      public long getIntValue() {
        return intValue_;
      }
      /**
       * <code>optional int64 int_value = 4;</code>
       */
      private void setIntValue(long value) {
        bitField0_ |= 0x00000008;
        intValue_ = value;
      }
      /**
       * <code>optional int64 int_value = 4;</code>
       */
      private void clearIntValue() {
        bitField0_ = (bitField0_ & ~0x00000008);
        intValue_ = 0L;
      }

      public static final int UINT_VALUE_FIELD_NUMBER = 5;
      private long uintValue_;
      /**
       * <code>optional uint64 uint_value = 5;</code>
       */
      public boolean hasUintValue() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint64 uint_value = 5;</code>
       */
      public long getUintValue() {
        return uintValue_;
      }
      /**
       * <code>optional uint64 uint_value = 5;</code>
       */
      private void setUintValue(long value) {
        bitField0_ |= 0x00000010;
        uintValue_ = value;
      }
      /**
       * <code>optional uint64 uint_value = 5;</code>
       */
      private void clearUintValue() {
        bitField0_ = (bitField0_ & ~0x00000010);
        uintValue_ = 0L;
      }

      public static final int SINT_VALUE_FIELD_NUMBER = 6;
      private long sintValue_;
      /**
       * <code>optional sint64 sint_value = 6;</code>
       */
      public boolean hasSintValue() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint64 sint_value = 6;</code>
       */
      public long getSintValue() {
        return sintValue_;
      }
      /**
       * <code>optional sint64 sint_value = 6;</code>
       */
      private void setSintValue(long value) {
        bitField0_ |= 0x00000020;
        sintValue_ = value;
      }
      /**
       * <code>optional sint64 sint_value = 6;</code>
       */
      private void clearSintValue() {
        bitField0_ = (bitField0_ & ~0x00000020);
        sintValue_ = 0L;
      }

      public static final int BOOL_VALUE_FIELD_NUMBER = 7;
      private boolean boolValue_;
      /**
       * <code>optional bool bool_value = 7;</code>
       */
      public boolean hasBoolValue() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool bool_value = 7;</code>
       */
      public boolean getBoolValue() {
        return boolValue_;
      }
      /**
       * <code>optional bool bool_value = 7;</code>
       */
      private void setBoolValue(boolean value) {
        bitField0_ |= 0x00000040;
        boolValue_ = value;
      }
      /**
       * <code>optional bool bool_value = 7;</code>
       */
      private void clearBoolValue() {
        bitField0_ = (bitField0_ & ~0x00000040);
        boolValue_ = false;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        com.google.protobuf.GeneratedMessageLite
          .ExtendableMessage<vector_tile.VectorTile21.Tile.Value, vector_tile.VectorTile21.Tile.Value.Builder>
            .ExtensionWriter extensionWriter =
              newExtensionWriter();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeString(1, getStringValue());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeFloat(2, floatValue_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeDouble(3, doubleValue_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeInt64(4, intValue_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeUInt64(5, uintValue_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          output.writeSInt64(6, sintValue_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          output.writeBool(7, boolValue_);
        }
        extensionWriter.writeUntil(536870912, output);
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(1, getStringValue());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(2, floatValue_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, doubleValue_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(4, intValue_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(5, uintValue_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeSInt64Size(6, sintValue_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(7, boolValue_);
        }
        size += extensionsSerializedSize();
        size += unknownFields.getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      public static vector_tile.VectorTile21.Tile.Value parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static vector_tile.VectorTile21.Tile.Value parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static vector_tile.VectorTile21.Tile.Value parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static vector_tile.VectorTile21.Tile.Value parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static vector_tile.VectorTile21.Tile.Value parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static vector_tile.VectorTile21.Tile.Value parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static vector_tile.VectorTile21.Tile.Value parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static vector_tile.VectorTile21.Tile.Value parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static vector_tile.VectorTile21.Tile.Value parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static vector_tile.VectorTile21.Tile.Value parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static vector_tile.VectorTile21.Tile.Value parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static vector_tile.VectorTile21.Tile.Value parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(vector_tile.VectorTile21.Tile.Value prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Variant type encoding
       * The use of values is described in section 4.1 of the specification
       * </pre>
       *
       * Protobuf type {@code vector_tile.Tile.Value}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
            vector_tile.VectorTile21.Tile.Value, Builder> implements
          // @@protoc_insertion_point(builder_implements:vector_tile.Tile.Value)
          vector_tile.VectorTile21.Tile.ValueOrBuilder {
        // Construct using vector_tile.VectorTile21.Tile.Value.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Exactly one of these values must be present in a valid message
         * </pre>
         *
         * <code>optional string string_value = 1;</code>
         */
        public boolean hasStringValue() {
          return instance.hasStringValue();
        }
        /**
         * <pre>
         * Exactly one of these values must be present in a valid message
         * </pre>
         *
         * <code>optional string string_value = 1;</code>
         */
        public java.lang.String getStringValue() {
          return instance.getStringValue();
        }
        /**
         * <pre>
         * Exactly one of these values must be present in a valid message
         * </pre>
         *
         * <code>optional string string_value = 1;</code>
         */
        public com.google.protobuf.ByteString
            getStringValueBytes() {
          return instance.getStringValueBytes();
        }
        /**
         * <pre>
         * Exactly one of these values must be present in a valid message
         * </pre>
         *
         * <code>optional string string_value = 1;</code>
         */
        public Builder setStringValue(
            java.lang.String value) {
          copyOnWrite();
          instance.setStringValue(value);
          return this;
        }
        /**
         * <pre>
         * Exactly one of these values must be present in a valid message
         * </pre>
         *
         * <code>optional string string_value = 1;</code>
         */
        public Builder clearStringValue() {
          copyOnWrite();
          instance.clearStringValue();
          return this;
        }
        /**
         * <pre>
         * Exactly one of these values must be present in a valid message
         * </pre>
         *
         * <code>optional string string_value = 1;</code>
         */
        public Builder setStringValueBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setStringValueBytes(value);
          return this;
        }

        /**
         * <code>optional float float_value = 2;</code>
         */
        public boolean hasFloatValue() {
          return instance.hasFloatValue();
        }
        /**
         * <code>optional float float_value = 2;</code>
         */
        public float getFloatValue() {
          return instance.getFloatValue();
        }
        /**
         * <code>optional float float_value = 2;</code>
         */
        public Builder setFloatValue(float value) {
          copyOnWrite();
          instance.setFloatValue(value);
          return this;
        }
        /**
         * <code>optional float float_value = 2;</code>
         */
        public Builder clearFloatValue() {
          copyOnWrite();
          instance.clearFloatValue();
          return this;
        }

        /**
         * <code>optional double double_value = 3;</code>
         */
        public boolean hasDoubleValue() {
          return instance.hasDoubleValue();
        }
        /**
         * <code>optional double double_value = 3;</code>
         */
        public double getDoubleValue() {
          return instance.getDoubleValue();
        }
        /**
         * <code>optional double double_value = 3;</code>
         */
        public Builder setDoubleValue(double value) {
          copyOnWrite();
          instance.setDoubleValue(value);
          return this;
        }
        /**
         * <code>optional double double_value = 3;</code>
         */
        public Builder clearDoubleValue() {
          copyOnWrite();
          instance.clearDoubleValue();
          return this;
        }

        /**
         * <code>optional int64 int_value = 4;</code>
         */
        public boolean hasIntValue() {
          return instance.hasIntValue();
        }
        /**
         * <code>optional int64 int_value = 4;</code>
         */
        public long getIntValue() {
          return instance.getIntValue();
        }
        /**
         * <code>optional int64 int_value = 4;</code>
         */
        public Builder setIntValue(long value) {
          copyOnWrite();
          instance.setIntValue(value);
          return this;
        }
        /**
         * <code>optional int64 int_value = 4;</code>
         */
        public Builder clearIntValue() {
          copyOnWrite();
          instance.clearIntValue();
          return this;
        }

        /**
         * <code>optional uint64 uint_value = 5;</code>
         */
        public boolean hasUintValue() {
          return instance.hasUintValue();
        }
        /**
         * <code>optional uint64 uint_value = 5;</code>
         */
        public long getUintValue() {
          return instance.getUintValue();
        }
        /**
         * <code>optional uint64 uint_value = 5;</code>
         */
        public Builder setUintValue(long value) {
          copyOnWrite();
          instance.setUintValue(value);
          return this;
        }
        /**
         * <code>optional uint64 uint_value = 5;</code>
         */
        public Builder clearUintValue() {
          copyOnWrite();
          instance.clearUintValue();
          return this;
        }

        /**
         * <code>optional sint64 sint_value = 6;</code>
         */
        public boolean hasSintValue() {
          return instance.hasSintValue();
        }
        /**
         * <code>optional sint64 sint_value = 6;</code>
         */
        public long getSintValue() {
          return instance.getSintValue();
        }
        /**
         * <code>optional sint64 sint_value = 6;</code>
         */
        public Builder setSintValue(long value) {
          copyOnWrite();
          instance.setSintValue(value);
          return this;
        }
        /**
         * <code>optional sint64 sint_value = 6;</code>
         */
        public Builder clearSintValue() {
          copyOnWrite();
          instance.clearSintValue();
          return this;
        }

        /**
         * <code>optional bool bool_value = 7;</code>
         */
        public boolean hasBoolValue() {
          return instance.hasBoolValue();
        }
        /**
         * <code>optional bool bool_value = 7;</code>
         */
        public boolean getBoolValue() {
          return instance.getBoolValue();
        }
        /**
         * <code>optional bool bool_value = 7;</code>
         */
        public Builder setBoolValue(boolean value) {
          copyOnWrite();
          instance.setBoolValue(value);
          return this;
        }
        /**
         * <code>optional bool bool_value = 7;</code>
         */
        public Builder clearBoolValue() {
          copyOnWrite();
          instance.clearBoolValue();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:vector_tile.Tile.Value)
      }
      private byte memoizedIsInitialized = 2;
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new vector_tile.VectorTile21.Tile.Value();
          }
          case IS_INITIALIZED: {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return DEFAULT_INSTANCE;
            if (isInitialized == 0) return null;

            boolean shouldMemoize = ((Boolean) arg0).booleanValue();
            if (!extensionsAreInitialized()) {
              return null;
            }
            return DEFAULT_INSTANCE;

          }
          case MAKE_IMMUTABLE: {
            return null;
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case VISIT: {
            Visitor visitor = (Visitor) arg0;
            vector_tile.VectorTile21.Tile.Value other = (vector_tile.VectorTile21.Tile.Value) arg1;
            stringValue_ = visitor.visitString(
                hasStringValue(), stringValue_,
                other.hasStringValue(), other.stringValue_);
            floatValue_ = visitor.visitFloat(
                hasFloatValue(), floatValue_,
                other.hasFloatValue(), other.floatValue_);
            doubleValue_ = visitor.visitDouble(
                hasDoubleValue(), doubleValue_,
                other.hasDoubleValue(), other.doubleValue_);
            intValue_ = visitor.visitLong(
                hasIntValue(), intValue_,
                other.hasIntValue(), other.intValue_);
            uintValue_ = visitor.visitLong(
                hasUintValue(), uintValue_,
                other.hasUintValue(), other.uintValue_);
            sintValue_ = visitor.visitLong(
                hasSintValue(), sintValue_,
                other.hasSintValue(), other.sintValue_);
            boolValue_ = visitor.visitBoolean(
                hasBoolValue(), boolValue_,
                other.hasBoolValue(), other.boolValue_);
            if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                .INSTANCE) {
              bitField0_ |= other.bitField0_;
            }
            return this;
          }
          case MERGE_FROM_STREAM: {
            com.google.protobuf.CodedInputStream input =
                (com.google.protobuf.CodedInputStream) arg0;
            com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                (com.google.protobuf.ExtensionRegistryLite) arg1;
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  default: {
                    if (!parseUnknownField(getDefaultInstanceForType(),
                        input, extensionRegistry, tag)) {
                      done = true;
                    }
                    break;
                  }
                  case 10: {
                    java.lang.String s = input.readString();
                    bitField0_ |= 0x00000001;
                    stringValue_ = s;
                    break;
                  }
                  case 21: {
                    bitField0_ |= 0x00000002;
                    floatValue_ = input.readFloat();
                    break;
                  }
                  case 25: {
                    bitField0_ |= 0x00000004;
                    doubleValue_ = input.readDouble();
                    break;
                  }
                  case 32: {
                    bitField0_ |= 0x00000008;
                    intValue_ = input.readInt64();
                    break;
                  }
                  case 40: {
                    bitField0_ |= 0x00000010;
                    uintValue_ = input.readUInt64();
                    break;
                  }
                  case 48: {
                    bitField0_ |= 0x00000020;
                    sintValue_ = input.readSInt64();
                    break;
                  }
                  case 56: {
                    bitField0_ |= 0x00000040;
                    boolValue_ = input.readBool();
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw new RuntimeException(e.setUnfinishedMessage(this));
            } catch (java.io.IOException e) {
              throw new RuntimeException(
                  new com.google.protobuf.InvalidProtocolBufferException(
                      e.getMessage()).setUnfinishedMessage(this));
            } finally {
            }
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            if (PARSER == null) {    synchronized (vector_tile.VectorTile21.Tile.Value.class) {
                if (PARSER == null) {
                  PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                }
              }
            }
            return PARSER;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return memoizedIsInitialized;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:vector_tile.Tile.Value)
      private static final vector_tile.VectorTile21.Tile.Value DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new Value();
        DEFAULT_INSTANCE.makeImmutable();
      }

      public static vector_tile.VectorTile21.Tile.Value getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<Value> PARSER;

      public static com.google.protobuf.Parser<Value> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface FeatureOrBuilder extends
        // @@protoc_insertion_point(interface_extends:vector_tile.Tile.Feature)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <code>optional uint64 id = 1 [default = 0];</code>
       */
      boolean hasId();
      /**
       * <code>optional uint64 id = 1 [default = 0];</code>
       */
      long getId();

      /**
       * <pre>
       * Tags of this feature are encoded as repeated pairs of
       * integers.
       * A detailed description of tags is located in sections
       * 4.2 and 4.4 of the specification
       * </pre>
       *
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       */
      java.util.List<java.lang.Integer> getTagsList();
      /**
       * <pre>
       * Tags of this feature are encoded as repeated pairs of
       * integers.
       * A detailed description of tags is located in sections
       * 4.2 and 4.4 of the specification
       * </pre>
       *
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       */
      int getTagsCount();
      /**
       * <pre>
       * Tags of this feature are encoded as repeated pairs of
       * integers.
       * A detailed description of tags is located in sections
       * 4.2 and 4.4 of the specification
       * </pre>
       *
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       */
      int getTags(int index);

      /**
       * <pre>
       * The type of geometry stored in this feature.
       * </pre>
       *
       * <code>optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];</code>
       */
      boolean hasType();
      /**
       * <pre>
       * The type of geometry stored in this feature.
       * </pre>
       *
       * <code>optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];</code>
       */
      vector_tile.VectorTile21.Tile.GeomType getType();

      /**
       * <pre>
       * Contains a stream of commands and parameters (vertices).
       * A detailed description on geometry encoding is located in
       * section 4.3 of the specification.
       * </pre>
       *
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       */
      java.util.List<java.lang.Integer> getGeometryList();
      /**
       * <pre>
       * Contains a stream of commands and parameters (vertices).
       * A detailed description on geometry encoding is located in
       * section 4.3 of the specification.
       * </pre>
       *
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       */
      int getGeometryCount();
      /**
       * <pre>
       * Contains a stream of commands and parameters (vertices).
       * A detailed description on geometry encoding is located in
       * section 4.3 of the specification.
       * </pre>
       *
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       */
      int getGeometry(int index);
    }
    /**
     * <pre>
     * Features are described in section 4.2 of the specification
     * </pre>
     *
     * Protobuf type {@code vector_tile.Tile.Feature}
     */
    public  static final class Feature extends
        com.google.protobuf.GeneratedMessageLite<
            Feature, Feature.Builder> implements
        // @@protoc_insertion_point(message_implements:vector_tile.Tile.Feature)
        FeatureOrBuilder {
      private Feature() {
        tags_ = emptyIntList();
        geometry_ = emptyIntList();
      }
      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private long id_;
      /**
       * <code>optional uint64 id = 1 [default = 0];</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint64 id = 1 [default = 0];</code>
       */
      public long getId() {
        return id_;
      }
      /**
       * <code>optional uint64 id = 1 [default = 0];</code>
       */
      private void setId(long value) {
        bitField0_ |= 0x00000001;
        id_ = value;
      }
      /**
       * <code>optional uint64 id = 1 [default = 0];</code>
       */
      private void clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0L;
      }

      public static final int TAGS_FIELD_NUMBER = 2;
      private com.google.protobuf.Internal.IntList tags_;
      /**
       * <pre>
       * Tags of this feature are encoded as repeated pairs of
       * integers.
       * A detailed description of tags is located in sections
       * 4.2 and 4.4 of the specification
       * </pre>
       *
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getTagsList() {
        return tags_;
      }
      /**
       * <pre>
       * Tags of this feature are encoded as repeated pairs of
       * integers.
       * A detailed description of tags is located in sections
       * 4.2 and 4.4 of the specification
       * </pre>
       *
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       */
      public int getTagsCount() {
        return tags_.size();
      }
      /**
       * <pre>
       * Tags of this feature are encoded as repeated pairs of
       * integers.
       * A detailed description of tags is located in sections
       * 4.2 and 4.4 of the specification
       * </pre>
       *
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       */
      public int getTags(int index) {
        return tags_.getInt(index);
      }
      private int tagsMemoizedSerializedSize = -1;
      private void ensureTagsIsMutable() {
        if (!tags_.isModifiable()) {
          tags_ =
              com.google.protobuf.GeneratedMessageLite.mutableCopy(tags_);
         }
      }
      /**
       * <pre>
       * Tags of this feature are encoded as repeated pairs of
       * integers.
       * A detailed description of tags is located in sections
       * 4.2 and 4.4 of the specification
       * </pre>
       *
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       */
      private void setTags(
          int index, int value) {
        ensureTagsIsMutable();
        tags_.setInt(index, value);
      }
      /**
       * <pre>
       * Tags of this feature are encoded as repeated pairs of
       * integers.
       * A detailed description of tags is located in sections
       * 4.2 and 4.4 of the specification
       * </pre>
       *
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       */
      private void addTags(int value) {
        ensureTagsIsMutable();
        tags_.addInt(value);
      }
      /**
       * <pre>
       * Tags of this feature are encoded as repeated pairs of
       * integers.
       * A detailed description of tags is located in sections
       * 4.2 and 4.4 of the specification
       * </pre>
       *
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       */
      private void addAllTags(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTagsIsMutable();
        com.google.protobuf.AbstractMessageLite.addAll(
            values, tags_);
      }
      /**
       * <pre>
       * Tags of this feature are encoded as repeated pairs of
       * integers.
       * A detailed description of tags is located in sections
       * 4.2 and 4.4 of the specification
       * </pre>
       *
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       */
      private void clearTags() {
        tags_ = emptyIntList();
      }

      public static final int TYPE_FIELD_NUMBER = 3;
      private int type_;
      /**
       * <pre>
       * The type of geometry stored in this feature.
       * </pre>
       *
       * <code>optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * The type of geometry stored in this feature.
       * </pre>
       *
       * <code>optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];</code>
       */
      public vector_tile.VectorTile21.Tile.GeomType getType() {
        vector_tile.VectorTile21.Tile.GeomType result = vector_tile.VectorTile21.Tile.GeomType.forNumber(type_);
        return result == null ? vector_tile.VectorTile21.Tile.GeomType.UNKNOWN : result;
      }
      /**
       * <pre>
       * The type of geometry stored in this feature.
       * </pre>
       *
       * <code>optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];</code>
       */
      private void setType(vector_tile.VectorTile21.Tile.GeomType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        type_ = value.getNumber();
      }
      /**
       * <pre>
       * The type of geometry stored in this feature.
       * </pre>
       *
       * <code>optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];</code>
       */
      private void clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = 0;
      }

      public static final int GEOMETRY_FIELD_NUMBER = 4;
      private com.google.protobuf.Internal.IntList geometry_;
      /**
       * <pre>
       * Contains a stream of commands and parameters (vertices).
       * A detailed description on geometry encoding is located in
       * section 4.3 of the specification.
       * </pre>
       *
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getGeometryList() {
        return geometry_;
      }
      /**
       * <pre>
       * Contains a stream of commands and parameters (vertices).
       * A detailed description on geometry encoding is located in
       * section 4.3 of the specification.
       * </pre>
       *
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       */
      public int getGeometryCount() {
        return geometry_.size();
      }
      /**
       * <pre>
       * Contains a stream of commands and parameters (vertices).
       * A detailed description on geometry encoding is located in
       * section 4.3 of the specification.
       * </pre>
       *
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       */
      public int getGeometry(int index) {
        return geometry_.getInt(index);
      }
      private int geometryMemoizedSerializedSize = -1;
      private void ensureGeometryIsMutable() {
        if (!geometry_.isModifiable()) {
          geometry_ =
              com.google.protobuf.GeneratedMessageLite.mutableCopy(geometry_);
         }
      }
      /**
       * <pre>
       * Contains a stream of commands and parameters (vertices).
       * A detailed description on geometry encoding is located in
       * section 4.3 of the specification.
       * </pre>
       *
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       */
      private void setGeometry(
          int index, int value) {
        ensureGeometryIsMutable();
        geometry_.setInt(index, value);
      }
      /**
       * <pre>
       * Contains a stream of commands and parameters (vertices).
       * A detailed description on geometry encoding is located in
       * section 4.3 of the specification.
       * </pre>
       *
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       */
      private void addGeometry(int value) {
        ensureGeometryIsMutable();
        geometry_.addInt(value);
      }
      /**
       * <pre>
       * Contains a stream of commands and parameters (vertices).
       * A detailed description on geometry encoding is located in
       * section 4.3 of the specification.
       * </pre>
       *
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       */
      private void addAllGeometry(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureGeometryIsMutable();
        com.google.protobuf.AbstractMessageLite.addAll(
            values, geometry_);
      }
      /**
       * <pre>
       * Contains a stream of commands and parameters (vertices).
       * A detailed description on geometry encoding is located in
       * section 4.3 of the specification.
       * </pre>
       *
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       */
      private void clearGeometry() {
        geometry_ = emptyIntList();
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt64(1, id_);
        }
        if (getTagsList().size() > 0) {
          output.writeUInt32NoTag(18);
          output.writeUInt32NoTag(tagsMemoizedSerializedSize);
        }
        for (int i = 0; i < tags_.size(); i++) {
          output.writeUInt32NoTag(tags_.getInt(i));
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeEnum(3, type_);
        }
        if (getGeometryList().size() > 0) {
          output.writeUInt32NoTag(34);
          output.writeUInt32NoTag(geometryMemoizedSerializedSize);
        }
        for (int i = 0; i < geometry_.size(); i++) {
          output.writeUInt32NoTag(geometry_.getInt(i));
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(1, id_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < tags_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(tags_.getInt(i));
          }
          size += dataSize;
          if (!getTagsList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          tagsMemoizedSerializedSize = dataSize;
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(3, type_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < geometry_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(geometry_.getInt(i));
          }
          size += dataSize;
          if (!getGeometryList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          geometryMemoizedSerializedSize = dataSize;
        }
        size += unknownFields.getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      public static vector_tile.VectorTile21.Tile.Feature parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static vector_tile.VectorTile21.Tile.Feature parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static vector_tile.VectorTile21.Tile.Feature parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static vector_tile.VectorTile21.Tile.Feature parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static vector_tile.VectorTile21.Tile.Feature parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static vector_tile.VectorTile21.Tile.Feature parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static vector_tile.VectorTile21.Tile.Feature parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static vector_tile.VectorTile21.Tile.Feature parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static vector_tile.VectorTile21.Tile.Feature parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static vector_tile.VectorTile21.Tile.Feature parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static vector_tile.VectorTile21.Tile.Feature parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static vector_tile.VectorTile21.Tile.Feature parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(vector_tile.VectorTile21.Tile.Feature prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Features are described in section 4.2 of the specification
       * </pre>
       *
       * Protobuf type {@code vector_tile.Tile.Feature}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            vector_tile.VectorTile21.Tile.Feature, Builder> implements
          // @@protoc_insertion_point(builder_implements:vector_tile.Tile.Feature)
          vector_tile.VectorTile21.Tile.FeatureOrBuilder {
        // Construct using vector_tile.VectorTile21.Tile.Feature.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <code>optional uint64 id = 1 [default = 0];</code>
         */
        public boolean hasId() {
          return instance.hasId();
        }
        /**
         * <code>optional uint64 id = 1 [default = 0];</code>
         */
        public long getId() {
          return instance.getId();
        }
        /**
         * <code>optional uint64 id = 1 [default = 0];</code>
         */
        public Builder setId(long value) {
          copyOnWrite();
          instance.setId(value);
          return this;
        }
        /**
         * <code>optional uint64 id = 1 [default = 0];</code>
         */
        public Builder clearId() {
          copyOnWrite();
          instance.clearId();
          return this;
        }

        /**
         * <pre>
         * Tags of this feature are encoded as repeated pairs of
         * integers.
         * A detailed description of tags is located in sections
         * 4.2 and 4.4 of the specification
         * </pre>
         *
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         */
        public java.util.List<java.lang.Integer>
            getTagsList() {
          return java.util.Collections.unmodifiableList(
              instance.getTagsList());
        }
        /**
         * <pre>
         * Tags of this feature are encoded as repeated pairs of
         * integers.
         * A detailed description of tags is located in sections
         * 4.2 and 4.4 of the specification
         * </pre>
         *
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         */
        public int getTagsCount() {
          return instance.getTagsCount();
        }
        /**
         * <pre>
         * Tags of this feature are encoded as repeated pairs of
         * integers.
         * A detailed description of tags is located in sections
         * 4.2 and 4.4 of the specification
         * </pre>
         *
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         */
        public int getTags(int index) {
          return instance.getTags(index);
        }
        /**
         * <pre>
         * Tags of this feature are encoded as repeated pairs of
         * integers.
         * A detailed description of tags is located in sections
         * 4.2 and 4.4 of the specification
         * </pre>
         *
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         */
        public Builder setTags(
            int index, int value) {
          copyOnWrite();
          instance.setTags(index, value);
          return this;
        }
        /**
         * <pre>
         * Tags of this feature are encoded as repeated pairs of
         * integers.
         * A detailed description of tags is located in sections
         * 4.2 and 4.4 of the specification
         * </pre>
         *
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         */
        public Builder addTags(int value) {
          copyOnWrite();
          instance.addTags(value);
          return this;
        }
        /**
         * <pre>
         * Tags of this feature are encoded as repeated pairs of
         * integers.
         * A detailed description of tags is located in sections
         * 4.2 and 4.4 of the specification
         * </pre>
         *
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         */
        public Builder addAllTags(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          copyOnWrite();
          instance.addAllTags(values);
          return this;
        }
        /**
         * <pre>
         * Tags of this feature are encoded as repeated pairs of
         * integers.
         * A detailed description of tags is located in sections
         * 4.2 and 4.4 of the specification
         * </pre>
         *
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         */
        public Builder clearTags() {
          copyOnWrite();
          instance.clearTags();
          return this;
        }

        /**
         * <pre>
         * The type of geometry stored in this feature.
         * </pre>
         *
         * <code>optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];</code>
         */
        public boolean hasType() {
          return instance.hasType();
        }
        /**
         * <pre>
         * The type of geometry stored in this feature.
         * </pre>
         *
         * <code>optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];</code>
         */
        public vector_tile.VectorTile21.Tile.GeomType getType() {
          return instance.getType();
        }
        /**
         * <pre>
         * The type of geometry stored in this feature.
         * </pre>
         *
         * <code>optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];</code>
         */
        public Builder setType(vector_tile.VectorTile21.Tile.GeomType value) {
          copyOnWrite();
          instance.setType(value);
          return this;
        }
        /**
         * <pre>
         * The type of geometry stored in this feature.
         * </pre>
         *
         * <code>optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];</code>
         */
        public Builder clearType() {
          copyOnWrite();
          instance.clearType();
          return this;
        }

        /**
         * <pre>
         * Contains a stream of commands and parameters (vertices).
         * A detailed description on geometry encoding is located in
         * section 4.3 of the specification.
         * </pre>
         *
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         */
        public java.util.List<java.lang.Integer>
            getGeometryList() {
          return java.util.Collections.unmodifiableList(
              instance.getGeometryList());
        }
        /**
         * <pre>
         * Contains a stream of commands and parameters (vertices).
         * A detailed description on geometry encoding is located in
         * section 4.3 of the specification.
         * </pre>
         *
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         */
        public int getGeometryCount() {
          return instance.getGeometryCount();
        }
        /**
         * <pre>
         * Contains a stream of commands and parameters (vertices).
         * A detailed description on geometry encoding is located in
         * section 4.3 of the specification.
         * </pre>
         *
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         */
        public int getGeometry(int index) {
          return instance.getGeometry(index);
        }
        /**
         * <pre>
         * Contains a stream of commands and parameters (vertices).
         * A detailed description on geometry encoding is located in
         * section 4.3 of the specification.
         * </pre>
         *
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         */
        public Builder setGeometry(
            int index, int value) {
          copyOnWrite();
          instance.setGeometry(index, value);
          return this;
        }
        /**
         * <pre>
         * Contains a stream of commands and parameters (vertices).
         * A detailed description on geometry encoding is located in
         * section 4.3 of the specification.
         * </pre>
         *
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         */
        public Builder addGeometry(int value) {
          copyOnWrite();
          instance.addGeometry(value);
          return this;
        }
        /**
         * <pre>
         * Contains a stream of commands and parameters (vertices).
         * A detailed description on geometry encoding is located in
         * section 4.3 of the specification.
         * </pre>
         *
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         */
        public Builder addAllGeometry(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          copyOnWrite();
          instance.addAllGeometry(values);
          return this;
        }
        /**
         * <pre>
         * Contains a stream of commands and parameters (vertices).
         * A detailed description on geometry encoding is located in
         * section 4.3 of the specification.
         * </pre>
         *
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         */
        public Builder clearGeometry() {
          copyOnWrite();
          instance.clearGeometry();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:vector_tile.Tile.Feature)
      }
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new vector_tile.VectorTile21.Tile.Feature();
          }
          case IS_INITIALIZED: {
            return DEFAULT_INSTANCE;
          }
          case MAKE_IMMUTABLE: {
            tags_.makeImmutable();
            geometry_.makeImmutable();
            return null;
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case VISIT: {
            Visitor visitor = (Visitor) arg0;
            vector_tile.VectorTile21.Tile.Feature other = (vector_tile.VectorTile21.Tile.Feature) arg1;
            id_ = visitor.visitLong(
                hasId(), id_,
                other.hasId(), other.id_);
            tags_= visitor.visitIntList(tags_, other.tags_);
            type_ = visitor.visitInt(hasType(), type_,
                other.hasType(), other.type_);
            geometry_= visitor.visitIntList(geometry_, other.geometry_);
            if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                .INSTANCE) {
              bitField0_ |= other.bitField0_;
            }
            return this;
          }
          case MERGE_FROM_STREAM: {
            com.google.protobuf.CodedInputStream input =
                (com.google.protobuf.CodedInputStream) arg0;
            com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                (com.google.protobuf.ExtensionRegistryLite) arg1;
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  default: {
                    if (!parseUnknownField(tag, input)) {
                      done = true;
                    }
                    break;
                  }
                  case 8: {
                    bitField0_ |= 0x00000001;
                    id_ = input.readUInt64();
                    break;
                  }
                  case 16: {
                    if (!tags_.isModifiable()) {
                      tags_ =
                          com.google.protobuf.GeneratedMessageLite.mutableCopy(tags_);
                    }
                    tags_.addInt(input.readUInt32());
                    break;
                  }
                  case 18: {
                    int length = input.readRawVarint32();
                    int limit = input.pushLimit(length);
                    if (!tags_.isModifiable() && input.getBytesUntilLimit() > 0) {
                      tags_ =
                          com.google.protobuf.GeneratedMessageLite.mutableCopy(tags_);
                    }
                    while (input.getBytesUntilLimit() > 0) {
                      tags_.addInt(input.readUInt32());
                    }
                    input.popLimit(limit);
                    break;
                  }
                  case 24: {
                    int rawValue = input.readEnum();
                    vector_tile.VectorTile21.Tile.GeomType value = vector_tile.VectorTile21.Tile.GeomType.forNumber(rawValue);
                    if (value == null) {
                      super.mergeVarintField(3, rawValue);
                    } else {
                      bitField0_ |= 0x00000002;
                      type_ = rawValue;
                    }
                    break;
                  }
                  case 32: {
                    if (!geometry_.isModifiable()) {
                      geometry_ =
                          com.google.protobuf.GeneratedMessageLite.mutableCopy(geometry_);
                    }
                    geometry_.addInt(input.readUInt32());
                    break;
                  }
                  case 34: {
                    int length = input.readRawVarint32();
                    int limit = input.pushLimit(length);
                    if (!geometry_.isModifiable() && input.getBytesUntilLimit() > 0) {
                      geometry_ =
                          com.google.protobuf.GeneratedMessageLite.mutableCopy(geometry_);
                    }
                    while (input.getBytesUntilLimit() > 0) {
                      geometry_.addInt(input.readUInt32());
                    }
                    input.popLimit(limit);
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw new RuntimeException(e.setUnfinishedMessage(this));
            } catch (java.io.IOException e) {
              throw new RuntimeException(
                  new com.google.protobuf.InvalidProtocolBufferException(
                      e.getMessage()).setUnfinishedMessage(this));
            } finally {
            }
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            if (PARSER == null) {    synchronized (vector_tile.VectorTile21.Tile.Feature.class) {
                if (PARSER == null) {
                  PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                }
              }
            }
            return PARSER;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:vector_tile.Tile.Feature)
      private static final vector_tile.VectorTile21.Tile.Feature DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new Feature();
        DEFAULT_INSTANCE.makeImmutable();
      }

      public static vector_tile.VectorTile21.Tile.Feature getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<Feature> PARSER;

      public static com.google.protobuf.Parser<Feature> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface LayerOrBuilder extends
        // @@protoc_insertion_point(interface_extends:vector_tile.Tile.Layer)
         com.google.protobuf.GeneratedMessageLite.
              ExtendableMessageOrBuilder<
                  Layer, Layer.Builder> {

      /**
       * <pre>
       * Any compliant implementation must first read the version
       * number encoded in this message and choose the correct
       * implementation for this version number before proceeding to
       * decode other parts of this message.
       * </pre>
       *
       * <code>required uint32 version = 15 [default = 1];</code>
       */
      boolean hasVersion();
      /**
       * <pre>
       * Any compliant implementation must first read the version
       * number encoded in this message and choose the correct
       * implementation for this version number before proceeding to
       * decode other parts of this message.
       * </pre>
       *
       * <code>required uint32 version = 15 [default = 1];</code>
       */
      int getVersion();

      /**
       * <code>required string name = 1;</code>
       */
      boolean hasName();
      /**
       * <code>required string name = 1;</code>
       */
      java.lang.String getName();
      /**
       * <code>required string name = 1;</code>
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      java.util.List<vector_tile.VectorTile21.Tile.Feature>
          getFeaturesList();
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      vector_tile.VectorTile21.Tile.Feature getFeatures(int index);
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      int getFeaturesCount();

      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      java.util.List<java.lang.String>
          getKeysList();
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      int getKeysCount();
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      java.lang.String getKeys(int index);
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      com.google.protobuf.ByteString
          getKeysBytes(int index);

      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      java.util.List<vector_tile.VectorTile21.Tile.Value>
          getValuesList();
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      vector_tile.VectorTile21.Tile.Value getValues(int index);
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      int getValuesCount();

      /**
       * <pre>
       * The bounding box in this tile spans from 0..4095 units
       * Although this is an "optional" field it is required by the specification.
       * See https://github.com/mapbox/vector-tile-spec/issues/47
       * </pre>
       *
       * <code>optional uint32 extent = 5 [default = 4096];</code>
       */
      boolean hasExtent();
      /**
       * <pre>
       * The bounding box in this tile spans from 0..4095 units
       * Although this is an "optional" field it is required by the specification.
       * See https://github.com/mapbox/vector-tile-spec/issues/47
       * </pre>
       *
       * <code>optional uint32 extent = 5 [default = 4096];</code>
       */
      int getExtent();
    }
    /**
     * <pre>
     * Layers are described in section 4.1 of the specification
     * </pre>
     *
     * Protobuf type {@code vector_tile.Tile.Layer}
     */
    public  static final class Layer extends
        com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
          Layer, Layer.Builder> implements
        // @@protoc_insertion_point(message_implements:vector_tile.Tile.Layer)
        LayerOrBuilder {
      private Layer() {
        version_ = 1;
        name_ = "";
        features_ = emptyProtobufList();
        keys_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
        values_ = emptyProtobufList();
        extent_ = 4096;
      }
      private int bitField0_;
      public static final int VERSION_FIELD_NUMBER = 15;
      private int version_;
      /**
       * <pre>
       * Any compliant implementation must first read the version
       * number encoded in this message and choose the correct
       * implementation for this version number before proceeding to
       * decode other parts of this message.
       * </pre>
       *
       * <code>required uint32 version = 15 [default = 1];</code>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Any compliant implementation must first read the version
       * number encoded in this message and choose the correct
       * implementation for this version number before proceeding to
       * decode other parts of this message.
       * </pre>
       *
       * <code>required uint32 version = 15 [default = 1];</code>
       */
      public int getVersion() {
        return version_;
      }
      /**
       * <pre>
       * Any compliant implementation must first read the version
       * number encoded in this message and choose the correct
       * implementation for this version number before proceeding to
       * decode other parts of this message.
       * </pre>
       *
       * <code>required uint32 version = 15 [default = 1];</code>
       */
      private void setVersion(int value) {
        bitField0_ |= 0x00000001;
        version_ = value;
      }
      /**
       * <pre>
       * Any compliant implementation must first read the version
       * number encoded in this message and choose the correct
       * implementation for this version number before proceeding to
       * decode other parts of this message.
       * </pre>
       *
       * <code>required uint32 version = 15 [default = 1];</code>
       */
      private void clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000001);
        version_ = 1;
      }

      public static final int NAME_FIELD_NUMBER = 1;
      private java.lang.String name_;
      /**
       * <code>required string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string name = 1;</code>
       */
      public java.lang.String getName() {
        return name_;
      }
      /**
       * <code>required string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(name_);
      }
      /**
       * <code>required string name = 1;</code>
       */
      private void setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
      }
      /**
       * <code>required string name = 1;</code>
       */
      private void clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = getDefaultInstance().getName();
      }
      /**
       * <code>required string name = 1;</code>
       */
      private void setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value.toStringUtf8();
      }

      public static final int FEATURES_FIELD_NUMBER = 2;
      private com.google.protobuf.Internal.ProtobufList<vector_tile.VectorTile21.Tile.Feature> features_;
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      public java.util.List<vector_tile.VectorTile21.Tile.Feature> getFeaturesList() {
        return features_;
      }
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      public java.util.List<? extends vector_tile.VectorTile21.Tile.FeatureOrBuilder>
          getFeaturesOrBuilderList() {
        return features_;
      }
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      public int getFeaturesCount() {
        return features_.size();
      }
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      public vector_tile.VectorTile21.Tile.Feature getFeatures(int index) {
        return features_.get(index);
      }
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      public vector_tile.VectorTile21.Tile.FeatureOrBuilder getFeaturesOrBuilder(
          int index) {
        return features_.get(index);
      }
      private void ensureFeaturesIsMutable() {
        if (!features_.isModifiable()) {
          features_ =
              com.google.protobuf.GeneratedMessageLite.mutableCopy(features_);
         }
      }

      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      private void setFeatures(
          int index, vector_tile.VectorTile21.Tile.Feature value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFeaturesIsMutable();
        features_.set(index, value);
      }
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      private void setFeatures(
          int index, vector_tile.VectorTile21.Tile.Feature.Builder builderForValue) {
        ensureFeaturesIsMutable();
        features_.set(index, builderForValue.build());
      }
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      private void addFeatures(vector_tile.VectorTile21.Tile.Feature value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFeaturesIsMutable();
        features_.add(value);
      }
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      private void addFeatures(
          int index, vector_tile.VectorTile21.Tile.Feature value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFeaturesIsMutable();
        features_.add(index, value);
      }
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      private void addFeatures(
          vector_tile.VectorTile21.Tile.Feature.Builder builderForValue) {
        ensureFeaturesIsMutable();
        features_.add(builderForValue.build());
      }
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      private void addFeatures(
          int index, vector_tile.VectorTile21.Tile.Feature.Builder builderForValue) {
        ensureFeaturesIsMutable();
        features_.add(index, builderForValue.build());
      }
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      private void addAllFeatures(
          java.lang.Iterable<? extends vector_tile.VectorTile21.Tile.Feature> values) {
        ensureFeaturesIsMutable();
        com.google.protobuf.AbstractMessageLite.addAll(
            values, features_);
      }
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      private void clearFeatures() {
        features_ = emptyProtobufList();
      }
      /**
       * <pre>
       * The actual features in this tile.
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
       */
      private void removeFeatures(int index) {
        ensureFeaturesIsMutable();
        features_.remove(index);
      }

      public static final int KEYS_FIELD_NUMBER = 3;
      private com.google.protobuf.Internal.ProtobufList<java.lang.String> keys_;
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      public java.util.List<java.lang.String> getKeysList() {
        return keys_;
      }
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      public int getKeysCount() {
        return keys_.size();
      }
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      public java.lang.String getKeys(int index) {
        return keys_.get(index);
      }
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      public com.google.protobuf.ByteString
          getKeysBytes(int index) {
        return com.google.protobuf.ByteString.copyFromUtf8(
            keys_.get(index));
      }
      private void ensureKeysIsMutable() {
        if (!keys_.isModifiable()) {
          keys_ =
              com.google.protobuf.GeneratedMessageLite.mutableCopy(keys_);
         }
      }
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      private void setKeys(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureKeysIsMutable();
        keys_.set(index, value);
      }
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      private void addKeys(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureKeysIsMutable();
        keys_.add(value);
      }
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      private void addAllKeys(
          java.lang.Iterable<java.lang.String> values) {
        ensureKeysIsMutable();
        com.google.protobuf.AbstractMessageLite.addAll(
            values, keys_);
      }
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      private void clearKeys() {
        keys_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
      }
      /**
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       *
       * <code>repeated string keys = 3;</code>
       */
      private void addKeysBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureKeysIsMutable();
        keys_.add(value.toStringUtf8());
      }

      public static final int VALUES_FIELD_NUMBER = 4;
      private com.google.protobuf.Internal.ProtobufList<vector_tile.VectorTile21.Tile.Value> values_;
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      public java.util.List<vector_tile.VectorTile21.Tile.Value> getValuesList() {
        return values_;
      }
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      public java.util.List<? extends vector_tile.VectorTile21.Tile.ValueOrBuilder>
          getValuesOrBuilderList() {
        return values_;
      }
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      public int getValuesCount() {
        return values_.size();
      }
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      public vector_tile.VectorTile21.Tile.Value getValues(int index) {
        return values_.get(index);
      }
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      public vector_tile.VectorTile21.Tile.ValueOrBuilder getValuesOrBuilder(
          int index) {
        return values_.get(index);
      }
      private void ensureValuesIsMutable() {
        if (!values_.isModifiable()) {
          values_ =
              com.google.protobuf.GeneratedMessageLite.mutableCopy(values_);
         }
      }

      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      private void setValues(
          int index, vector_tile.VectorTile21.Tile.Value value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureValuesIsMutable();
        values_.set(index, value);
      }
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      private void setValues(
          int index, vector_tile.VectorTile21.Tile.Value.Builder builderForValue) {
        ensureValuesIsMutable();
        values_.set(index, builderForValue.build());
      }
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      private void addValues(vector_tile.VectorTile21.Tile.Value value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureValuesIsMutable();
        values_.add(value);
      }
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      private void addValues(
          int index, vector_tile.VectorTile21.Tile.Value value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureValuesIsMutable();
        values_.add(index, value);
      }
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      private void addValues(
          vector_tile.VectorTile21.Tile.Value.Builder builderForValue) {
        ensureValuesIsMutable();
        values_.add(builderForValue.build());
      }
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      private void addValues(
          int index, vector_tile.VectorTile21.Tile.Value.Builder builderForValue) {
        ensureValuesIsMutable();
        values_.add(index, builderForValue.build());
      }
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      private void addAllValues(
          java.lang.Iterable<? extends vector_tile.VectorTile21.Tile.Value> values) {
        ensureValuesIsMutable();
        com.google.protobuf.AbstractMessageLite.addAll(
            values, values_);
      }
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      private void clearValues() {
        values_ = emptyProtobufList();
      }
      /**
       * <pre>
       * Dictionary encoding for values
       * </pre>
       *
       * <code>repeated .vector_tile.Tile.Value values = 4;</code>
       */
      private void removeValues(int index) {
        ensureValuesIsMutable();
        values_.remove(index);
      }

      public static final int EXTENT_FIELD_NUMBER = 5;
      private int extent_;
      /**
       * <pre>
       * The bounding box in this tile spans from 0..4095 units
       * Although this is an "optional" field it is required by the specification.
       * See https://github.com/mapbox/vector-tile-spec/issues/47
       * </pre>
       *
       * <code>optional uint32 extent = 5 [default = 4096];</code>
       */
      public boolean hasExtent() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * The bounding box in this tile spans from 0..4095 units
       * Although this is an "optional" field it is required by the specification.
       * See https://github.com/mapbox/vector-tile-spec/issues/47
       * </pre>
       *
       * <code>optional uint32 extent = 5 [default = 4096];</code>
       */
      public int getExtent() {
        return extent_;
      }
      /**
       * <pre>
       * The bounding box in this tile spans from 0..4095 units
       * Although this is an "optional" field it is required by the specification.
       * See https://github.com/mapbox/vector-tile-spec/issues/47
       * </pre>
       *
       * <code>optional uint32 extent = 5 [default = 4096];</code>
       */
      private void setExtent(int value) {
        bitField0_ |= 0x00000004;
        extent_ = value;
      }
      /**
       * <pre>
       * The bounding box in this tile spans from 0..4095 units
       * Although this is an "optional" field it is required by the specification.
       * See https://github.com/mapbox/vector-tile-spec/issues/47
       * </pre>
       *
       * <code>optional uint32 extent = 5 [default = 4096];</code>
       */
      private void clearExtent() {
        bitField0_ = (bitField0_ & ~0x00000004);
        extent_ = 4096;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        com.google.protobuf.GeneratedMessageLite
          .ExtendableMessage<vector_tile.VectorTile21.Tile.Layer, vector_tile.VectorTile21.Tile.Layer.Builder>
            .ExtensionWriter extensionWriter =
              newExtensionWriter();
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeString(1, getName());
        }
        for (int i = 0; i < features_.size(); i++) {
          output.writeMessage(2, features_.get(i));
        }
        for (int i = 0; i < keys_.size(); i++) {
          output.writeString(3, keys_.get(i));
        }
        for (int i = 0; i < values_.size(); i++) {
          output.writeMessage(4, values_.get(i));
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeUInt32(5, extent_);
        }
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(15, version_);
        }
        extensionWriter.writeUntil(536870912, output);
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(1, getName());
        }
        for (int i = 0; i < features_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, features_.get(i));
        }
        {
          int dataSize = 0;
          for (int i = 0; i < keys_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeStringSizeNoTag(keys_.get(i));
          }
          size += dataSize;
          size += 1 * getKeysList().size();
        }
        for (int i = 0; i < values_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, values_.get(i));
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(5, extent_);
        }
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(15, version_);
        }
        size += extensionsSerializedSize();
        size += unknownFields.getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      public static vector_tile.VectorTile21.Tile.Layer parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static vector_tile.VectorTile21.Tile.Layer parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static vector_tile.VectorTile21.Tile.Layer parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static vector_tile.VectorTile21.Tile.Layer parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static vector_tile.VectorTile21.Tile.Layer parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static vector_tile.VectorTile21.Tile.Layer parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static vector_tile.VectorTile21.Tile.Layer parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static vector_tile.VectorTile21.Tile.Layer parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static vector_tile.VectorTile21.Tile.Layer parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static vector_tile.VectorTile21.Tile.Layer parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static vector_tile.VectorTile21.Tile.Layer parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static vector_tile.VectorTile21.Tile.Layer parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(vector_tile.VectorTile21.Tile.Layer prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Layers are described in section 4.1 of the specification
       * </pre>
       *
       * Protobuf type {@code vector_tile.Tile.Layer}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
            vector_tile.VectorTile21.Tile.Layer, Builder> implements
          // @@protoc_insertion_point(builder_implements:vector_tile.Tile.Layer)
          vector_tile.VectorTile21.Tile.LayerOrBuilder {
        // Construct using vector_tile.VectorTile21.Tile.Layer.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Any compliant implementation must first read the version
         * number encoded in this message and choose the correct
         * implementation for this version number before proceeding to
         * decode other parts of this message.
         * </pre>
         *
         * <code>required uint32 version = 15 [default = 1];</code>
         */
        public boolean hasVersion() {
          return instance.hasVersion();
        }
        /**
         * <pre>
         * Any compliant implementation must first read the version
         * number encoded in this message and choose the correct
         * implementation for this version number before proceeding to
         * decode other parts of this message.
         * </pre>
         *
         * <code>required uint32 version = 15 [default = 1];</code>
         */
        public int getVersion() {
          return instance.getVersion();
        }
        /**
         * <pre>
         * Any compliant implementation must first read the version
         * number encoded in this message and choose the correct
         * implementation for this version number before proceeding to
         * decode other parts of this message.
         * </pre>
         *
         * <code>required uint32 version = 15 [default = 1];</code>
         */
        public Builder setVersion(int value) {
          copyOnWrite();
          instance.setVersion(value);
          return this;
        }
        /**
         * <pre>
         * Any compliant implementation must first read the version
         * number encoded in this message and choose the correct
         * implementation for this version number before proceeding to
         * decode other parts of this message.
         * </pre>
         *
         * <code>required uint32 version = 15 [default = 1];</code>
         */
        public Builder clearVersion() {
          copyOnWrite();
          instance.clearVersion();
          return this;
        }

        /**
         * <code>required string name = 1;</code>
         */
        public boolean hasName() {
          return instance.hasName();
        }
        /**
         * <code>required string name = 1;</code>
         */
        public java.lang.String getName() {
          return instance.getName();
        }
        /**
         * <code>required string name = 1;</code>
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          return instance.getNameBytes();
        }
        /**
         * <code>required string name = 1;</code>
         */
        public Builder setName(
            java.lang.String value) {
          copyOnWrite();
          instance.setName(value);
          return this;
        }
        /**
         * <code>required string name = 1;</code>
         */
        public Builder clearName() {
          copyOnWrite();
          instance.clearName();
          return this;
        }
        /**
         * <code>required string name = 1;</code>
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setNameBytes(value);
          return this;
        }

        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public java.util.List<vector_tile.VectorTile21.Tile.Feature> getFeaturesList() {
          return java.util.Collections.unmodifiableList(
              instance.getFeaturesList());
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public int getFeaturesCount() {
          return instance.getFeaturesCount();
        }/**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public vector_tile.VectorTile21.Tile.Feature getFeatures(int index) {
          return instance.getFeatures(index);
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public Builder setFeatures(
            int index, vector_tile.VectorTile21.Tile.Feature value) {
          copyOnWrite();
          instance.setFeatures(index, value);
          return this;
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public Builder setFeatures(
            int index, vector_tile.VectorTile21.Tile.Feature.Builder builderForValue) {
          copyOnWrite();
          instance.setFeatures(index, builderForValue);
          return this;
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public Builder addFeatures(vector_tile.VectorTile21.Tile.Feature value) {
          copyOnWrite();
          instance.addFeatures(value);
          return this;
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public Builder addFeatures(
            int index, vector_tile.VectorTile21.Tile.Feature value) {
          copyOnWrite();
          instance.addFeatures(index, value);
          return this;
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public Builder addFeatures(
            vector_tile.VectorTile21.Tile.Feature.Builder builderForValue) {
          copyOnWrite();
          instance.addFeatures(builderForValue);
          return this;
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public Builder addFeatures(
            int index, vector_tile.VectorTile21.Tile.Feature.Builder builderForValue) {
          copyOnWrite();
          instance.addFeatures(index, builderForValue);
          return this;
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public Builder addAllFeatures(
            java.lang.Iterable<? extends vector_tile.VectorTile21.Tile.Feature> values) {
          copyOnWrite();
          instance.addAllFeatures(values);
          return this;
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public Builder clearFeatures() {
          copyOnWrite();
          instance.clearFeatures();
          return this;
        }
        /**
         * <pre>
         * The actual features in this tile.
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Feature features = 2;</code>
         */
        public Builder removeFeatures(int index) {
          copyOnWrite();
          instance.removeFeatures(index);
          return this;
        }

        /**
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         *
         * <code>repeated string keys = 3;</code>
         */
        public java.util.List<java.lang.String>
            getKeysList() {
          return java.util.Collections.unmodifiableList(
              instance.getKeysList());
        }
        /**
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         *
         * <code>repeated string keys = 3;</code>
         */
        public int getKeysCount() {
          return instance.getKeysCount();
        }
        /**
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         *
         * <code>repeated string keys = 3;</code>
         */
        public java.lang.String getKeys(int index) {
          return instance.getKeys(index);
        }
        /**
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         *
         * <code>repeated string keys = 3;</code>
         */
        public com.google.protobuf.ByteString
            getKeysBytes(int index) {
          return instance.getKeysBytes(index);
        }
        /**
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         *
         * <code>repeated string keys = 3;</code>
         */
        public Builder setKeys(
            int index, java.lang.String value) {
          copyOnWrite();
          instance.setKeys(index, value);
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         *
         * <code>repeated string keys = 3;</code>
         */
        public Builder addKeys(
            java.lang.String value) {
          copyOnWrite();
          instance.addKeys(value);
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         *
         * <code>repeated string keys = 3;</code>
         */
        public Builder addAllKeys(
            java.lang.Iterable<java.lang.String> values) {
          copyOnWrite();
          instance.addAllKeys(values);
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         *
         * <code>repeated string keys = 3;</code>
         */
        public Builder clearKeys() {
          copyOnWrite();
          instance.clearKeys();
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         *
         * <code>repeated string keys = 3;</code>
         */
        public Builder addKeysBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.addKeysBytes(value);
          return this;
        }

        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public java.util.List<vector_tile.VectorTile21.Tile.Value> getValuesList() {
          return java.util.Collections.unmodifiableList(
              instance.getValuesList());
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public int getValuesCount() {
          return instance.getValuesCount();
        }/**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public vector_tile.VectorTile21.Tile.Value getValues(int index) {
          return instance.getValues(index);
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public Builder setValues(
            int index, vector_tile.VectorTile21.Tile.Value value) {
          copyOnWrite();
          instance.setValues(index, value);
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public Builder setValues(
            int index, vector_tile.VectorTile21.Tile.Value.Builder builderForValue) {
          copyOnWrite();
          instance.setValues(index, builderForValue);
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public Builder addValues(vector_tile.VectorTile21.Tile.Value value) {
          copyOnWrite();
          instance.addValues(value);
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public Builder addValues(
            int index, vector_tile.VectorTile21.Tile.Value value) {
          copyOnWrite();
          instance.addValues(index, value);
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public Builder addValues(
            vector_tile.VectorTile21.Tile.Value.Builder builderForValue) {
          copyOnWrite();
          instance.addValues(builderForValue);
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public Builder addValues(
            int index, vector_tile.VectorTile21.Tile.Value.Builder builderForValue) {
          copyOnWrite();
          instance.addValues(index, builderForValue);
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public Builder addAllValues(
            java.lang.Iterable<? extends vector_tile.VectorTile21.Tile.Value> values) {
          copyOnWrite();
          instance.addAllValues(values);
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public Builder clearValues() {
          copyOnWrite();
          instance.clearValues();
          return this;
        }
        /**
         * <pre>
         * Dictionary encoding for values
         * </pre>
         *
         * <code>repeated .vector_tile.Tile.Value values = 4;</code>
         */
        public Builder removeValues(int index) {
          copyOnWrite();
          instance.removeValues(index);
          return this;
        }

        /**
         * <pre>
         * The bounding box in this tile spans from 0..4095 units
         * Although this is an "optional" field it is required by the specification.
         * See https://github.com/mapbox/vector-tile-spec/issues/47
         * </pre>
         *
         * <code>optional uint32 extent = 5 [default = 4096];</code>
         */
        public boolean hasExtent() {
          return instance.hasExtent();
        }
        /**
         * <pre>
         * The bounding box in this tile spans from 0..4095 units
         * Although this is an "optional" field it is required by the specification.
         * See https://github.com/mapbox/vector-tile-spec/issues/47
         * </pre>
         *
         * <code>optional uint32 extent = 5 [default = 4096];</code>
         */
        public int getExtent() {
          return instance.getExtent();
        }
        /**
         * <pre>
         * The bounding box in this tile spans from 0..4095 units
         * Although this is an "optional" field it is required by the specification.
         * See https://github.com/mapbox/vector-tile-spec/issues/47
         * </pre>
         *
         * <code>optional uint32 extent = 5 [default = 4096];</code>
         */
        public Builder setExtent(int value) {
          copyOnWrite();
          instance.setExtent(value);
          return this;
        }
        /**
         * <pre>
         * The bounding box in this tile spans from 0..4095 units
         * Although this is an "optional" field it is required by the specification.
         * See https://github.com/mapbox/vector-tile-spec/issues/47
         * </pre>
         *
         * <code>optional uint32 extent = 5 [default = 4096];</code>
         */
        public Builder clearExtent() {
          copyOnWrite();
          instance.clearExtent();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:vector_tile.Tile.Layer)
      }
      private byte memoizedIsInitialized = 2;
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new vector_tile.VectorTile21.Tile.Layer();
          }
          case IS_INITIALIZED: {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return DEFAULT_INSTANCE;
            if (isInitialized == 0) return null;

            boolean shouldMemoize = ((Boolean) arg0).booleanValue();
            if (!hasVersion()) {
              return null;
            }
            if (!hasName()) {
              return null;
            }
            for (int i = 0; i < getValuesCount(); i++) {
              if (!getValues(i).isInitialized()) {
                return null;
              }
            }
            if (!extensionsAreInitialized()) {
              return null;
            }
            return DEFAULT_INSTANCE;

          }
          case MAKE_IMMUTABLE: {
            features_.makeImmutable();
            keys_.makeImmutable();
            values_.makeImmutable();
            return null;
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case VISIT: {
            Visitor visitor = (Visitor) arg0;
            vector_tile.VectorTile21.Tile.Layer other = (vector_tile.VectorTile21.Tile.Layer) arg1;
            version_ = visitor.visitInt(
                hasVersion(), version_,
                other.hasVersion(), other.version_);
            name_ = visitor.visitString(
                hasName(), name_,
                other.hasName(), other.name_);
            features_= visitor.visitList(features_, other.features_);
            keys_= visitor.visitList(keys_, other.keys_);
            values_= visitor.visitList(values_, other.values_);
            extent_ = visitor.visitInt(
                hasExtent(), extent_,
                other.hasExtent(), other.extent_);
            if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                .INSTANCE) {
              bitField0_ |= other.bitField0_;
            }
            return this;
          }
          case MERGE_FROM_STREAM: {
            com.google.protobuf.CodedInputStream input =
                (com.google.protobuf.CodedInputStream) arg0;
            com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                (com.google.protobuf.ExtensionRegistryLite) arg1;
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  default: {
                    if (!parseUnknownField(getDefaultInstanceForType(),
                        input, extensionRegistry, tag)) {
                      done = true;
                    }
                    break;
                  }
                  case 10: {
                    java.lang.String s = input.readString();
                    bitField0_ |= 0x00000002;
                    name_ = s;
                    break;
                  }
                  case 18: {
                    if (!features_.isModifiable()) {
                      features_ =
                          com.google.protobuf.GeneratedMessageLite.mutableCopy(features_);
                    }
                    features_.add(
                        input.readMessage(vector_tile.VectorTile21.Tile.Feature.parser(), extensionRegistry));
                    break;
                  }
                  case 26: {
                    java.lang.String s = input.readString();
                    if (!keys_.isModifiable()) {
                      keys_ =
                          com.google.protobuf.GeneratedMessageLite.mutableCopy(keys_);
                    }
                    keys_.add(s);
                    break;
                  }
                  case 34: {
                    if (!values_.isModifiable()) {
                      values_ =
                          com.google.protobuf.GeneratedMessageLite.mutableCopy(values_);
                    }
                    values_.add(
                        input.readMessage(vector_tile.VectorTile21.Tile.Value.parser(), extensionRegistry));
                    break;
                  }
                  case 40: {
                    bitField0_ |= 0x00000004;
                    extent_ = input.readUInt32();
                    break;
                  }
                  case 120: {
                    bitField0_ |= 0x00000001;
                    version_ = input.readUInt32();
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw new RuntimeException(e.setUnfinishedMessage(this));
            } catch (java.io.IOException e) {
              throw new RuntimeException(
                  new com.google.protobuf.InvalidProtocolBufferException(
                      e.getMessage()).setUnfinishedMessage(this));
            } finally {
            }
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            if (PARSER == null) {    synchronized (vector_tile.VectorTile21.Tile.Layer.class) {
                if (PARSER == null) {
                  PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                }
              }
            }
            return PARSER;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return memoizedIsInitialized;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:vector_tile.Tile.Layer)
      private static final vector_tile.VectorTile21.Tile.Layer DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new Layer();
        DEFAULT_INSTANCE.makeImmutable();
      }

      public static vector_tile.VectorTile21.Tile.Layer getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<Layer> PARSER;

      public static com.google.protobuf.Parser<Layer> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public static final int LAYERS_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.ProtobufList<vector_tile.VectorTile21.Tile.Layer> layers_;
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    public java.util.List<vector_tile.VectorTile21.Tile.Layer> getLayersList() {
      return layers_;
    }
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    public java.util.List<? extends vector_tile.VectorTile21.Tile.LayerOrBuilder>
        getLayersOrBuilderList() {
      return layers_;
    }
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    public int getLayersCount() {
      return layers_.size();
    }
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    public vector_tile.VectorTile21.Tile.Layer getLayers(int index) {
      return layers_.get(index);
    }
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    public vector_tile.VectorTile21.Tile.LayerOrBuilder getLayersOrBuilder(
        int index) {
      return layers_.get(index);
    }
    private void ensureLayersIsMutable() {
      if (!layers_.isModifiable()) {
        layers_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(layers_);
       }
    }

    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    private void setLayers(
        int index, vector_tile.VectorTile21.Tile.Layer value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureLayersIsMutable();
      layers_.set(index, value);
    }
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    private void setLayers(
        int index, vector_tile.VectorTile21.Tile.Layer.Builder builderForValue) {
      ensureLayersIsMutable();
      layers_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    private void addLayers(vector_tile.VectorTile21.Tile.Layer value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureLayersIsMutable();
      layers_.add(value);
    }
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    private void addLayers(
        int index, vector_tile.VectorTile21.Tile.Layer value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureLayersIsMutable();
      layers_.add(index, value);
    }
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    private void addLayers(
        vector_tile.VectorTile21.Tile.Layer.Builder builderForValue) {
      ensureLayersIsMutable();
      layers_.add(builderForValue.build());
    }
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    private void addLayers(
        int index, vector_tile.VectorTile21.Tile.Layer.Builder builderForValue) {
      ensureLayersIsMutable();
      layers_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    private void addAllLayers(
        java.lang.Iterable<? extends vector_tile.VectorTile21.Tile.Layer> values) {
      ensureLayersIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, layers_);
    }
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    private void clearLayers() {
      layers_ = emptyProtobufList();
    }
    /**
     * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
     */
    private void removeLayers(int index) {
      ensureLayersIsMutable();
      layers_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<vector_tile.VectorTile21.Tile, vector_tile.VectorTile21.Tile.Builder>
          .ExtensionWriter extensionWriter =
            newExtensionWriter();
      for (int i = 0; i < layers_.size(); i++) {
        output.writeMessage(3, layers_.get(i));
      }
      extensionWriter.writeUntil(8192, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < layers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, layers_.get(i));
      }
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static vector_tile.VectorTile21.Tile parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static vector_tile.VectorTile21.Tile parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static vector_tile.VectorTile21.Tile parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static vector_tile.VectorTile21.Tile parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static vector_tile.VectorTile21.Tile parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static vector_tile.VectorTile21.Tile parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static vector_tile.VectorTile21.Tile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static vector_tile.VectorTile21.Tile parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static vector_tile.VectorTile21.Tile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static vector_tile.VectorTile21.Tile parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static vector_tile.VectorTile21.Tile parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static vector_tile.VectorTile21.Tile parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(vector_tile.VectorTile21.Tile prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code vector_tile.Tile}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          vector_tile.VectorTile21.Tile, Builder> implements
        // @@protoc_insertion_point(builder_implements:vector_tile.Tile)
        vector_tile.VectorTile21.TileOrBuilder {
      // Construct using vector_tile.VectorTile21.Tile.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public java.util.List<vector_tile.VectorTile21.Tile.Layer> getLayersList() {
        return java.util.Collections.unmodifiableList(
            instance.getLayersList());
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public int getLayersCount() {
        return instance.getLayersCount();
      }/**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public vector_tile.VectorTile21.Tile.Layer getLayers(int index) {
        return instance.getLayers(index);
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public Builder setLayers(
          int index, vector_tile.VectorTile21.Tile.Layer value) {
        copyOnWrite();
        instance.setLayers(index, value);
        return this;
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public Builder setLayers(
          int index, vector_tile.VectorTile21.Tile.Layer.Builder builderForValue) {
        copyOnWrite();
        instance.setLayers(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public Builder addLayers(vector_tile.VectorTile21.Tile.Layer value) {
        copyOnWrite();
        instance.addLayers(value);
        return this;
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public Builder addLayers(
          int index, vector_tile.VectorTile21.Tile.Layer value) {
        copyOnWrite();
        instance.addLayers(index, value);
        return this;
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public Builder addLayers(
          vector_tile.VectorTile21.Tile.Layer.Builder builderForValue) {
        copyOnWrite();
        instance.addLayers(builderForValue);
        return this;
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public Builder addLayers(
          int index, vector_tile.VectorTile21.Tile.Layer.Builder builderForValue) {
        copyOnWrite();
        instance.addLayers(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public Builder addAllLayers(
          java.lang.Iterable<? extends vector_tile.VectorTile21.Tile.Layer> values) {
        copyOnWrite();
        instance.addAllLayers(values);
        return this;
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public Builder clearLayers() {
        copyOnWrite();
        instance.clearLayers();
        return this;
      }
      /**
       * <code>repeated .vector_tile.Tile.Layer layers = 3;</code>
       */
      public Builder removeLayers(int index) {
        copyOnWrite();
        instance.removeLayers(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:vector_tile.Tile)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new vector_tile.VectorTile21.Tile();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          for (int i = 0; i < getLayersCount(); i++) {
            if (!getLayers(i).isInitialized()) {
              return null;
            }
          }
          if (!extensionsAreInitialized()) {
            return null;
          }
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          layers_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          vector_tile.VectorTile21.Tile other = (vector_tile.VectorTile21.Tile) arg1;
          layers_= visitor.visitList(layers_, other.layers_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(getDefaultInstanceForType(),
                      input, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 26: {
                  if (!layers_.isModifiable()) {
                    layers_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(layers_);
                  }
                  layers_.add(
                      input.readMessage(vector_tile.VectorTile21.Tile.Layer.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (vector_tile.VectorTile21.Tile.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:vector_tile.Tile)
    private static final vector_tile.VectorTile21.Tile DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Tile();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static vector_tile.VectorTile21.Tile getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Tile> PARSER;

    public static com.google.protobuf.Parser<Tile> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
